#!/usr/bin/env python
# -*- coding: utf-8 -*-

#    DrySync copies source files/directories into a destination, asking the 
#      user for confirmation before actually doing it. 
#    Copyright (C) 2018 - Pablo Fernandez - naevtamarkus@gmail.com
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <https://www.gnu.org/licenses/>.
#
# You can find instructions here: https://github.com/naevtamarkus/drysync
# 

import os, sys
import shutil  # for copy2
import difflib
import filecmp

# This program consists of three main classes: DryRun(), Task() and Action()
# It can be used directly (has a main function) or imported (e.g. from the GUI)

class Task:
  # Task() definition of the source and target files/directories, and generates the list of Action()
  #  (CLI only has one, GUI can have many)
  def __init__(self, *initial_data, **kwargs):
    # set default attributes
    self.description= ''
    self.inputPaths=[]   # List of strings with input files/directories (e.g. [u'/dir', u'/file2'])
    self.recursive=True  # True = Recursive sync (include subdirectories)
    self.skipTopDir=True # True = Do not sync top directories, just its contents (/dir --> /dir/*)
    self.outputPath=''   # String with output Path (e.g. "/tmp")
    self.errorGenerateActions=None   # String with the error when trying to generate the actions
    # And then overwrite them with the given params
    for dictionary in initial_data:
      for key in dictionary:
        setattr(self, key, dictionary[key])
    for key in kwargs:
      setattr(self, key, kwargs[key])

  def generateActions(self):
    # Returns a list of Action() with all the actions to perform to have this Task done
    actions = []
    self.errorGenerateActions=None
    # Convert ~/ into /home/x/
    outFullPath = os.path.expanduser(self.outputPath)
    try:
      for inputPath in self.inputPaths:
        inFullPath = os.path.expanduser(inputPath)
        if os.path.isfile(inFullPath) or os.path.islink(inFullPath):
          self.__copyFile(inFullPath, outFullPath, actions)
        if os.path.isdir(inFullPath):
          self.__copyDirectory(inFullPath, outFullPath, actions, includeTop=(not self.skipTopDir), recursive=self.recursive)
    except KeyboardInterrupt as e: 
      self.errorGenerateActions = e
      print ("KeyboardInterrupt exception. Last generated action:\n* %s" % actions[-1].toString())
      sys.exit()
    except Exception as e: 
      self.errorGenerateActions = e
    return actions

  def __diffAndCopy(self, src, dst, actions):
    # Expands a list of actions with a simple copy of a file if they are different
    # Add necesary actions to copy file if needed (may be no action at all)
    # Exceptions should be catched in the caller of this function
    isNew = not os.path.lexists(dst)
    if os.path.islink(src) and (isNew or not os.path.islink(dst) or os.readlink(src) != os.readlink(dst)):
      # It's a symlink, make sure dst points to the same place as src
      actions.append(Action(command='ln', source=os.readlink(src), target=dst, isNew=isNew))

    elif not os.path.islink(src) and os.path.isfile(src) and (isNew or not filecmp.cmp(src, dst)):
      actions.append(Action(command='cp', source=src, target=dst, isNew=isNew))
    # TODO we could check also permissions are the same and do only an Action(chmod) if not

  def __copyFile(self, src, dst, actions):
    # Generates an action for a simple copy of a file, which is appended to the parameter
    # src is a file and dst is a directory
    # Exceptions should be catched in the caller of this function
    # If the destination dir does not exist, create it
    #print "__copyFile (%s, %s)" % (src, dst)
    name = os.path.basename(src)
    if not os.path.isdir(dst): 
      actions.append(Action(command='mkdir', source=src, target=dst, isNew=True))
    dstname = os.path.join(dst, name)
    self.__diffAndCopy(src, dstname, actions)

  def __copyDirectory(self, src, dst, actions, includeTop=False, recursive=True):
    # Walks through directories generating actions
    # Returns a list of Actions
    # src and dst must be directories (absolute paths)
    # Exceptions should be catched in the caller of this function
    allFiles = os.listdir(src)
    dirName = os.path.basename(src)
    # first mkdir target dir if does not exist
    if not os.path.isdir(dst): 
      actions.append(Action(command='mkdir', source=src, target=dst, isNew=True))
    # Ascend an extra level on target dir (only the first recursive call, includeTop should be false afterwards)
    if includeTop:
      dst = os.path.join(dst, dirName)
      if not os.path.isdir(dst): 
        actions.append(Action(command='mkdir', source=src, target=dst, isNew=True))
    # At this point, we can go file by file   
    for name in allFiles:
      srcname = os.path.join(src, name)
      dstname = os.path.join(dst, name)
      # If it's a link, treat it like a file
      if os.path.isdir(srcname) and not os.path.islink(dstname):
        # It's a directory, recurse if we're asked to
        if recursive:
          # TODO we may want to this at the end of the loop, to avoid coming up and down 
          self.__copyDirectory(srcname, dstname, actions)
      else: 
        # It's a file or a link, diff and copy if necessary
        self.__diffAndCopy(srcname, dstname, actions)



# Action() defines each individual sync action to make progress on a Task (e.g. file A copies to B)
class Action:
  def __init__(self, *initial_data, **kwargs):
    # set default attributes
    self.command = ''     # Can be one of [cp,ln,mkdir]
    self.target = ''      # String with the target of the action
    self.source = ''      # String with the source of the action
    self.isNew = False    # True = the target does not exist
    self.errorMsg = None  # None = success, otherwise String with error message
    self.hasExecuted = False   
    # And then overwrite them with the given params
    for dictionary in initial_data:
      for key in dictionary:
        setattr(self, key, dictionary[key])
    for key in kwargs:
      setattr(self, key, kwargs[key])

  def showDetail(self):
    # Explains the actual action. If src and dst exist and are files, shows a diff
    # Returns a String with all details
    # If the action has executed, just drop a summary and return
    if self.hasExecuted: return self.getExecutionLog()
    # Otherwise
    text = self.toString() + '\n'
    if self.isNew:
      text += 'Target does not yet exist, it will be created'
    elif self.command == 'ln':
      # May be different targets or file types, just show that
      try:
        if os.path.islink(self.target):
          text += "Currently %s now points to: %s" % (self.target, os.readlink(self.target))
        else:
          text += "Target is a real file, not a link, which will be deleted"
      except Exception as e: 
        text += 'ERROR in showDetail\n%s' % e
    elif self.command == 'cp':
      # They are files
      # Check if files are binary
      textchars = bytearray({7,8,9,10,12,13,27} | set(range(0x20, 0x100)) - {0x7f})
      is_binary_string = lambda bytes: bool(bytes.translate(None, textchars))
      isBinSource = is_binary_string(open(self.source, 'rb').read(4096))
      isBinTarget = is_binary_string(open(self.target, 'rb').read(4096))
      try:
        sizeSource = os.path.getsize(self.source)
        sizeTarget = os.path.getsize(self.target)
        text += 'Source file: %s\n' % self.source
        text += 'Size: %s bytes\n' % sizeSource
        text += 'Binary: %s\n---\n' % isBinSource
        text += 'Target file: %s\n' % self.target
        text += 'Size: %s bytes\n' % sizeTarget
        text += 'Binary: %s\n---\n' % isBinTarget
        if isBinSource or isBinTarget:
          text += 'Not comparing binary files'
        elif sizeSource > 40000 or sizeTarget > 40000:
          text += 'Not comparing files over 40 KB' 
        else:
          f1=open(self.source,'r')  #open a file
          f2=open(self.target,'r') #open another file to compare
          str1=f1.readlines()
          str2=f2.readlines()
          # we want to convert the target into the source
          diff = difflib.unified_diff(str2, str1, fromfile=self.target, tofile=self.source, n=0 )
          text += '\n'.join(diff)
      except Exception as e: 
        text += 'ERROR in showDetail\n%s' % e
    else:
      text += "Nothing else to highlight"
    return text

  def toString(self):
    # Returns a one-line string with the action to do (only for brief info)
    if self.command == 'cp':
      return "cp -a %s %s" % (self.source, self.target)
    if self.command == 'mkdir':
      return "mkdir %s" % (self.target)
    if self.command == 'ln':
      return "ln -sf %s %s" % (self.source, self.target)

  def getExecutionLog(self):
    # Returns a one-line string with the execution log, plus extra lines if there were errors
    if self.hasExecuted:
      if self.errorMsg == None:
        return '[OK] %s' % self.toString()
      if self.errorMsg != None:
        return '[ERROR] %s\n%s' % (self.toString(), self.errorMsg)
    else:
      return '[PENDING] %s' % self.toString()

  def execute(self):
    # Does the actual execution of the operation
    try:
      if self.command == 'cp':
        shutil.copy2(self.source, self.target)
      if self.command == 'mkdir':
        os.mkdir(self.target)
        shutil.copystat(self.source, self.target) # copy also the permissions
      if self.command == 'ln':
        if not self.isNew:  
          os.remove(self.target) # Python does not overwrite links, need to remove first if existed
        os.symlink(self.source, self.target) # target may be relative path # TODO windows requires an extra param
      # Clear the error if this worked (needed to re-run)
      self.errorMsg = None
    except Exception as e: 
      self.errorMsg = e
    # Action has finished (errors or not)
    self.hasExecuted = True


# DryRun() is the top class, which contains one or more Task(), one single list of Action()
#  and does the actual execution
class DryRun:
  def __init__(self, *initial_data, **kwargs):
    # set default attributes
    self.tasks = []     # List of Task() 
    self.actions = []   # List of Action()
    self.errorGenerateActions = None  # String wit the error while generating actions
    # These three are maintained for performance when dealing with all actions
    self.summaryErrors=0           
    self.summarySuccesses=0        
    self.lastExecutedAction = None 
    # Lambdas for pre/post execution of each action
    self.preActionLambda = None
    self.postActionLambda = None
    # And then overwrite them with the given params
    for dictionary in initial_data:
      for key in dictionary:
        setattr(self, key, dictionary[key])
    for key in kwargs:
      setattr(self, key, kwargs[key])

  def setPreAction(self, cb=None):
    # Assign a function that is called BEFORE executing an action
    # The lambda must accept two params: index and action
    # Param 1: index of the action in the list of all actions
    # Param 2: the actual Action() object 
    self.preActionLambda = cb

  def setPostAction(self, cb=None):
    # Assign a function that is called AFTER executing an action
    # The lambda must accept two params: index and action
    # Param 1: index of the action in the list of all actions
    # Param 2: the actual Action() object 
    self.postActionLambda = cb

  def addTask(self, task):
    # Adds a task to the List of Task()
    self.tasks.append(task)

  def dryRun(self):
    # Does the actual Dry Run with selected tasks (generates the actions, does not execute them)
    self.actions = []
    self.errorGenerateActions = None
    self.summaryErrors=0 
    self.summarySuccesses=0 
    self.lastExecutedAction = None
    for task in self.tasks:
      self.actions.extend(task.generateActions())
      if task.errorGenerateActions != None:
        self.errorGenerateActions = task.errorGenerateActions
        break

  def executeAll(self, force=False):
    # Does the real execution of all the generated Actions
    # Param 1: if force = True, the execution will continue even if it finds errors
    self.summaryErrors=0 
    self.summarySuccesses=0 
    for index, action in enumerate(self.actions):
      if self.preActionLambda != None: self.preActionLambda(index, action)
      # Don't execute if it already run successfully before
      if not action.hasExecuted or action.errorMsg != None:
        action.execute()  
      # In any case, count errors and successes
      if action.errorMsg == None:
        self.summarySuccesses += 1 # if we got to this point, no errors occurred 
      else:
        self.summaryErrors += 1
      self.lastExecutedAction = index
      if self.postActionLambda != None: self.postActionLambda(index, action)
      # Exit the loop if there has been an error, unless we're in force mode
      if not force and action.errorMsg != None:
        break

  def getExecutionLog(self, onlySummary=False, onlyErrors=False, limit=None):
    # Returns a string with the execution log. 
    txt = ''
    count = 0
    if not onlySummary:
      for index, action in enumerate(self.actions):
        # Consider only Executed actions
        if index > self.lastExecutedAction:
          break  
        # We print if onlyErrors=False or if the action has an error
        if not onlyErrors or action.errorMsg != None:
          txt += '%s\n' % action.getExecutionLog()
          count += 1
          continue
        if limit != None and count == limit:
          txt += '[...] (truncated to %d actions)\n' % limit
          break
    if self.lastExecutedAction != None:
      txt += '%d actions executed (of %d) with %d errors' % (self.lastExecutedAction + 1, len(self.actions), self.summaryErrors)
    else:
      txt += 'Execution has not yet begun'
    return txt


# ******** BEGIN *********
if __name__ == '__main__':
  # DEFINITION OF HELPER FUNCTIONS FOR THE CLI

  from itertools import chain
  def parse_range_list(rl):
    # Obtain a list of numbers within a range (e.g. 2,4-6 returns [2,4,5,6])
    def parse_range(r):
      if len(r) == 0:
        return []
      parts = r.split("-")
      if len(parts) > 2:
        print ("Invalid range: {}".format(r))
        return []
      return range(int(parts[0]), int(parts[-1])+1)
    return sorted(set(chain.from_iterable(map(parse_range, rl.split(",")))))

  def printPendingActions(all = False):
    # Prints all pending actions
    # Returns true if the list has been truncated, otherwise false
    # global run, args (readonly)
    print(" The following pending actions are needed to sync:")
    count = 0
    for index, action in enumerate(run.actions):
      if action.hasExecuted != True or action.errorMsg != None:
        count += 1
        # Consider only actions that have either not run or failed before
        diff = "*" if not action.isNew else "" # mark actions with diff information to show
        print ("%d%s: %s" % (index, diff, action.toString()))
        if not all and args.truncate > 1 and count == args.truncate:
          print ("[...] %d actions to do" % len(run.actions))
          return True
    return False

  # Define the Question Loops for the user to interact with
  # 1. Step by step loop:
  def stepByStepQuestionLoop():
    truncated = False
    while True:
      print("\n Type action number(s) to execute (e.g. 3,24-21)")
      try:
        if truncated:
          input = real_raw_input(" Or select: Print again, show All pending, Quit step-by-step [P/A/Q]?")
        else:
          input = real_raw_input(" Or select: Print again, Quit step-by-step [P/Q]?")
      except KeyboardInterrupt as e: 
        print('User Keyboard interrupt')
        return
      # Check input
      if input in ['Q', 'q']:
        return
      elif input in ['A', 'a']:
        # Print all actions and ask again
        truncated = printPendingActions(all=True)
        continue
      elif input in ['P', 'p']:
        # Print all actions and ask again
        truncated = printPendingActions()
        continue
      else:
        # They have given us a set of numbers, try to analyze what it is and execute them
        numbers = parse_range_list(input)
        if len(numbers) > 0:
          for i in numbers:
            run.actions[i].execute()
            print (run.actions[i].getExecutionLog())
    # Loop indefinitely

  # 2. Main loop
  def mainQuestionLoop(truncated):
    while True:
      print("\n Type action number to display details")
      try:
        if truncated:
          input = real_raw_input(" Or select: eXecute, Print again, show All, Step-by-step execution, Quit [X/P/A/S/Q]?")
        else:
          input = real_raw_input(" Or select: eXecute, Print again, Step-by-step execution, Quit [X/P/S/Q]?")
      except KeyboardInterrupt: 
        print('User Keyboard interrupt')
        return
      # Check input
      if input in ['Q', 'q']:
        return
      elif input in ['A', 'a']:
        # Print all actions and ask again
        printPendingActions(all=True)
      elif input in ['P', 'p']:
        # Print all actions and ask again
        printPendingActions()
      elif input in ['S', 's']:
        # Go to the next menu
        stepByStepQuestionLoop()
      elif input in ['X', 'x']:
        print (" Syncing...")
        # We can pass a pre/post action callback
        if args.verbose:
          def log(index, action):
            print(action.getExecutionLog())
          run.setPostAction(log)
        # do the sync!
        run.executeAll(force=args.force) 
        print (run.getExecutionLog(onlyErrors=True, onlySummary=args.verbose)) # Only summary if verbose
        return # TODO maybe we want to stay and recover?
      elif input.isdigit() and int(input) < len(run.actions):
        print (run.actions[int(input)].showDetail())
      else:
        print(" Invalid answer!")
    # Loop indefinitely

  # END OF DEFINITION OF HELPER FUNCTIONS FOR THE CLI
  # Running CLI
  # To make raw_input for python 2/3
  real_raw_input = vars(__builtins__).get('raw_input',input)
  # Get params
  import argparse
  parser = argparse.ArgumentParser(description='DrySync copies source files/directories into a destination, asking the user for confirmation before actually doing it')
  parser.add_argument('source', help='Source files or directories', nargs='+', default=[])
  parser.add_argument('destination', help='Destination directory')
  parser.add_argument('--includetopdir', help='Sync also top directory', action="store_true")
  parser.add_argument('--norecursive', help='Prevent going down subdirectories', action="store_true")
  parser.add_argument('--verbose', '-v', help='Show all actions as they are executed', action="store_true")
  parser.add_argument('--force', help='Do not stop after the first execution error', action="store_true")
  parser.add_argument('--truncate', help='Display only the first N actions. (0 for All)', default='100', type=int)
  args, unknownargs = parser.parse_known_args()

  # Create the task and do the dry run
  run = DryRun()
  task = Task(inputPaths=args.source, outputPath=args.destination, recursive=not args.norecursive, skipTopDir=not args.includetopdir)
  run.addTask(task)
  run.dryRun()
  if len(run.actions) < 1:
    print(" Source and destination are already in sync. Nothing to do")
    sys.exit()

  # Otherwise there is work to do. Show it.
  truncated = printPendingActions()
  # Ask the user what to do next
  mainQuestionLoop(truncated)
